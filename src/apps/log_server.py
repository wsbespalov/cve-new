import os
import sys
import json
import logging
from logging.handlers import RotatingFileHandler

runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

from flask import Flask, request, Response, send_from_directory, render_template
from flask_bootstrap import Bootstrap

app = Flask(__name__, static_url_path='')
Bootstrap(app)

log_filename = 'updater.log'


@app.route('/', methods=['GET'])
def index():
    return 'active'


@app.route('/log', methods=['POST'])
def log():
    if not request.json:
        return Response('Not JSON format', status=400, mimetype="text/plain")
    data = request.json
    source = data['source'] if 'source' in data else '?'
    message = data['message'] if 'message' in data else '?'
    code = data['code'] if 'code' in data else '?'
    text = 'From [%s] : [%s] with code [%s]' % (source, message, code)
    app.logger.info(text)
    return Response('Accepted', status=200, mimetype="text/plain")


@app.route('/download', methods=['GET'])
def download():
    return app.send_static_file(log_filename)


@app.route('/show', methods=['GET'])
def show():
    try:
        messages = []
        with open(log_filename) as f:
            lines = f.readlines()
        for line in lines:
            messages.append({
                'source': line.split('[')[1].split(']')[0],
                'message': line.split('[')[2].split(']')[0],
                'code': line.split('[')[3].split(']')[0]
                }
            )
    except (IOError, OSError):
        messages = [
            {'source': 'test_source', 'message': 'log file read error', 'code': -1},
        ]

    return render_template(
        'index.html',
        messages=messages
    )


@app.route('/clear')
def clear():
    try:
        with open(log_filename, 'w') as f:
            f.write('')
        return Response('log file cleared', status=200, mimetype="text/plain")
    except (IOError, OSError):
        return Response('log file read error', status=500, mimetype="text/plain")


if __name__ == '__main__':
    handler = RotatingFileHandler(log_filename, maxBytes=100000, backupCount=1)
    handler.setLevel(logging.INFO)
    app.logger.addHandler(handler)
    from settings import settings
    st = settings.Settings()
    cfg = st.load()
    app.run(host=cfg['flask_host'], port=cfg['flask_port'], debug=cfg['flask_debug'])
