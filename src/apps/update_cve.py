import os
import sys
runPath = os.path.dirname(os.path.realpath(__file__))
sys.path.append(os.path.join(runPath, ".."))

import datetime
from xml.sax import make_parser
from apps.messages import *
from apps.tasks import *
from apps.getfile import getFile
from apps.handlers.cvehandler import CVEHandler
from apps.progressbar import progressbar
from dateutil.parser import parse as parse_datetime

from apps.mongo import Mongo
from apps.cache import Cache

def logme(message, code=0):
    makelog(os.path.basename(__file__), message, code)

class UpdateCVE():

    def __init__(self, settings):
        self.settings = settings
        self.mongo = Mongo()
        self.cache = Cache()
        self.file_prefix = self.settings['cve_file_prefix']
        self.file_suffix = self.settings['cve_file_suffix']
        self.file_mod = self.settings['cve_file_mod']
        self.file_rec = self.settings['cve_file_rec']
        self.date = datetime.datetime.now()
        self.year = self.date.year + 1
        self.cveStartYear = self.settings['start_year']
        self.verbose = self.settings['verbose']
        self.defaultvalue = {}
        self.defaultvalue['cwe'] = "Unknown"

    def run(self):
        logme('database updation started')
        getfile = self.file_prefix + self.file_mod + self.file_suffix
        url = self.settings['source_cve'] + getfile
        logme('try to get MODIFIED file', CODE_NORMAL)
        try:
            (f, r) = getFile(url)
            logme('file %s downloaded' % url, CODE_NORMAL)
        except:
            logme('cannot open URL %s' % url, CODE_FILE_ERROR)
            return False
        try:
            i = self.mongo.db.getInfo("cves")
        except:
            i = None
        last_modified = parse_datetime(r.headers['last-modified'], ignoretz=True)
        if i is not None:
            if last_modified == i['last-modified']:
                logme("CVE collection not modified", CODE_NORMAL)
                return True
        make_task_setColUpdate("cves", last_modified)
        parser = make_parser()
        ch = CVEHandler()
        parser.setContentHandler(ch)
        parser.parse(f)
        logme('file %s parsed' % getfile, CODE_NORMAL)
        for item in ch.cves:
            make_task_insert_or_modify_for_modified_file(item)
        logme('try to get RECENT file', CODE_NORMAL)
        getfile = self.file_prefix + self.file_rec + self.file_suffix
        url = self.settings['source_cve'] + getfile
        try:
            (f, r) = getFile(url)
            logme('file %s downloaded' % url, CODE_NORMAL)
        except:
            logme('cannot open URL %s' % url, CODE_FILE_ERROR)
            return False
        parser = make_parser()
        ch = CVEHandler()
        parser.setContentHandler(ch)
        parser.parse(f)
        for item in progressbar(ch.cves):
            make_task_insert_or_modify_for_recent_file(item)
        logme('complete update database', CODE_NORMAL)